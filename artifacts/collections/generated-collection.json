{
  "item": [
    {
      "id": "c37bca95-c7f7-4376-ae58-0bfb5e1930a5",
      "name": "List all users",
      "request": {
        "name": "List all users",
        "description": {},
        "url": {
          "path": [
            "users"
          ],
          "host": [
            "{{baseUrl}}"
          ],
          "query": [],
          "variable": []
        },
        "header": [
          {
            "key": "Accept",
            "value": "application/json"
          }
        ],
        "method": "GET",
        "auth": null
      },
      "response": [
        {
          "id": "3f9e6439-6987-4a48-90d7-aa1058d1a8c3",
          "name": "A list of users",
          "originalRequest": {
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET",
            "body": {}
          },
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "body": "[\n  {\n    \"id\": 11371817,\n    \"name\": \"nulla dolor ullamco eius\"\n  },\n  {\n    \"id\": -74360903,\n    \"name\": \"sint aliquip\"\n  }\n]",
          "cookie": [],
          "_postman_previewlanguage": "json"
        }
      ],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 2xx\", function () {",
              "    pm.response.to.be.success;",
              "});",
              "",
              "pm.test(\"Schema is valid\", function() {",
              "    // Attempt to get the schema from the response definition in the collection",
              "    // openapi-to-postmanv2 might store the expected response schema here",
              "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
              "        let expectedSchema = pm.item.responses.members[0].body;",
              "        if (expectedSchema) {",
              "            try {",
              "                // Assuming the schema is a JSON string, it needs to be parsed",
              "                let schema = JSON.parse(expectedSchema);",
              "                pm.response.to.have.jsonSchema(schema);",
              "            } catch (e) {",
              "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
              "                // Fail the test if schema cannot be parsed or is invalid",
              "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
              "            }",
              "        } else {",
              "            // If no schema is defined for the response, log it.",
              "            // Depending on requirements, this could be a failing test.",
              "            console.log(\"No schema found for this response in the collection definition.\");",
              "        }",
              "    } else {",
              "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
              "        // Optionally, fail the test if a schema is always expected.",
              "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      }
    }
  ],
  "event": [],
  "variable": [
    {
      "type": "string",
      "value": "/",
      "key": "baseUrl"
    }
  ],
  "info": {
    "_postman_id": "b69af3c3-ad62-413d-873a-8bdbe83c7ea9",
    "name": "Sample API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "description": {
      "content": "",
      "type": "text/plain"
    }
  }
}