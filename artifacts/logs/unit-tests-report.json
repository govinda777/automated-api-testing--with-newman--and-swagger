{
  "collection": {
    "_": {
      "postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7"
    },
    "item": [
      {
        "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
        "name": "List all users",
        "request": {
          "name": "List all users",
          "description": {
            "type": "text/plain"
          },
          "url": {
            "path": [
              "users"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            }
          ],
          "method": "GET"
        },
        "response": [
          {
            "_": {
              "postman_previewlanguage": "json"
            },
            "id": "763ce194-752f-4848-934b-6ad3ea918e23",
            "name": "A list of users",
            "originalRequest": {
              "url": {
                "path": [
                  "users"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Accept",
                  "value": "application/json"
                }
              ],
              "method": "GET",
              "body": {}
            },
            "status": "OK",
            "code": 200,
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
            "cookie": []
          }
        ],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
              "type": "text/javascript",
              "exec": [
                "pm.test(\"Status code is 2xx\", function () {",
                "    pm.response.to.be.success;",
                "});",
                "",
                "pm.test(\"Schema is valid\", function() {",
                "    // Attempt to get the schema from the response definition in the collection",
                "    // openapi-to-postmanv2 might store the expected response schema here",
                "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                "        let expectedSchema = pm.item.responses.members[0].body;",
                "        if (expectedSchema) {",
                "            try {",
                "                // Assuming the schema is a JSON string, it needs to be parsed",
                "                let schema = JSON.parse(expectedSchema);",
                "                pm.response.to.have.jsonSchema(schema);",
                "            } catch (e) {",
                "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                "                // Fail the test if schema cannot be parsed or is invalid",
                "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                "            }",
                "        } else {",
                "            // If no schema is defined for the response, log it.",
                "            // Depending on requirements, this could be a failing test.",
                "            console.log(\"No schema found for this response in the collection definition.\");",
                "        }",
                "    } else {",
                "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                "        // Optionally, fail the test if a schema is always expected.",
                "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                "    }",
                "});"
              ],
              "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
            }
          }
        ],
        "protocolProfileBehavior": {
          "disableBodyPruning": true
        }
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "string",
        "value": "/",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7",
      "name": "Sample API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-05-31T22:27:00.485Z",
      "postman_exported_using": "Newman/Automated Script v1.0"
    },
    "id": "d2b64e30-f505-4863-8627-880d90b327cb",
    "name": "Generated development Environment",
    "values": [
      {
        "type": "any",
        "value": "dev",
        "key": "environment"
      },
      {
        "type": "any",
        "value": "http://localhost:1234/api/dev",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "SUA_API_KEY_AQUI_DEV",
        "key": "apiKey"
      }
    ]
  },
  "globals": {
    "id": "de19bcab-66c4-4e1c-aed4-f46a56ad3911",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 1,
        "pending": 0,
        "failed": 1
      },
      "tests": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 2,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748730425114,
      "completed": 1748730425236
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f59b9c39-6f23-4201-822b-5273d84473d6",
          "httpRequestId": "d0db8e02-b9fe-4c7b-9a91-d4b7447f10e8"
        },
        "item": {
          "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
          "name": "List all users",
          "request": {
            "name": "List all users",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "763ce194-752f-4848-934b-6ad3ea918e23",
              "name": "A list of users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 2xx\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Schema is valid\", function() {",
                  "    // Attempt to get the schema from the response definition in the collection",
                  "    // openapi-to-postmanv2 might store the expected response schema here",
                  "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                  "        let expectedSchema = pm.item.responses.members[0].body;",
                  "        if (expectedSchema) {",
                  "            try {",
                  "                // Assuming the schema is a JSON string, it needs to be parsed",
                  "                let schema = JSON.parse(expectedSchema);",
                  "                pm.response.to.have.jsonSchema(schema);",
                  "            } catch (e) {",
                  "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                  "                // Fail the test if schema cannot be parsed or is invalid",
                  "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                  "            }",
                  "        } else {",
                  "            // If no schema is defined for the response, log it.",
                  "            // Depending on requirements, this could be a failing test.",
                  "            console.log(\"No schema found for this response in the collection definition.\");",
                  "        }",
                  "    } else {",
                  "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                  "        // Optionally, fail the test if a schema is always expected.",
                  "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "request": {
          "name": "List all users",
          "description": {
            "type": "text/plain"
          },
          "url": {
            "protocol": "http",
            "port": "1234",
            "path": [
              "api",
              "dev",
              "users"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Accept",
              "value": "application/json"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "67987884-038a-4efa-be45-9827bdac58ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:1234",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
        "requestError": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 1234
        },
        "assertions": [
          {
            "assertion": "Status code is 2xx",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 2xx",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)"
            }
          },
          {
            "assertion": "Schema is valid",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "Schema is valid",
              "message": "Cannot read properties of undefined (reading 'responses')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'responses')\n   at Object.eval sandbox-script.js:2:1)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -111,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 1234,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:1234",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:1234\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1549:16)",
          "checksum": "1f0b34b20516f35e97fce0a510675028",
          "id": "db40ae38-db80-46e5-adec-f1a43dfeb6fc",
          "timestamp": 1748730425182,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1549,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
          "name": "List all users",
          "request": {
            "name": "List all users",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "protocol": "http",
              "port": "1234",
              "path": [
                "api",
                "dev",
                "users"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "67987884-038a-4efa-be45-9827bdac58ef",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:1234",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "id": "763ce194-752f-4848-934b-6ad3ea918e23",
              "name": "A list of users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "http://localhost:1234/api/dev"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 2xx\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Schema is valid\", function() {",
                  "    // Attempt to get the schema from the response definition in the collection",
                  "    // openapi-to-postmanv2 might store the expected response schema here",
                  "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                  "        let expectedSchema = pm.item.responses.members[0].body;",
                  "        if (expectedSchema) {",
                  "            try {",
                  "                // Assuming the schema is a JSON string, it needs to be parsed",
                  "                let schema = JSON.parse(expectedSchema);",
                  "                pm.response.to.have.jsonSchema(schema);",
                  "            } catch (e) {",
                  "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                  "                // Fail the test if schema cannot be parsed or is invalid",
                  "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                  "            }",
                  "        } else {",
                  "            // If no schema is defined for the response, log it.",
                  "            // Depending on requirements, this could be a failing test.",
                  "            console.log(\"No schema found for this response in the collection definition.\");",
                  "        }",
                  "    } else {",
                  "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                  "        // Optionally, fail the test if a schema is always expected.",
                  "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f59b9c39-6f23-4201-822b-5273d84473d6",
          "httpRequestId": "d0db8e02-b9fe-4c7b-9a91-d4b7447f10e8"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 2xx",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:1)",
          "checksum": "f8703f5af99ede0ebde5d75df8bf571d",
          "id": "f5aa8516-8928-48a7-bcff-1b46a3a6a94f",
          "timestamp": 1748730425222,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
          "name": "List all users",
          "request": {
            "name": "List all users",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "763ce194-752f-4848-934b-6ad3ea918e23",
              "name": "A list of users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 2xx\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Schema is valid\", function() {",
                  "    // Attempt to get the schema from the response definition in the collection",
                  "    // openapi-to-postmanv2 might store the expected response schema here",
                  "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                  "        let expectedSchema = pm.item.responses.members[0].body;",
                  "        if (expectedSchema) {",
                  "            try {",
                  "                // Assuming the schema is a JSON string, it needs to be parsed",
                  "                let schema = JSON.parse(expectedSchema);",
                  "                pm.response.to.have.jsonSchema(schema);",
                  "            } catch (e) {",
                  "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                  "                // Fail the test if schema cannot be parsed or is invalid",
                  "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                  "            }",
                  "        } else {",
                  "            // If no schema is defined for the response, log it.",
                  "            // Depending on requirements, this could be a failing test.",
                  "            console.log(\"No schema found for this response in the collection definition.\");",
                  "        }",
                  "    } else {",
                  "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                  "        // Optionally, fail the test if a schema is always expected.",
                  "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7"
          },
          "item": [
            {
              "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
              "name": "List all users",
              "request": {
                "name": "List all users",
                "description": {
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "763ce194-752f-4848-934b-6ad3ea918e23",
                  "name": "A list of users",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 2xx\", function () {",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "pm.test(\"Schema is valid\", function() {",
                      "    // Attempt to get the schema from the response definition in the collection",
                      "    // openapi-to-postmanv2 might store the expected response schema here",
                      "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                      "        let expectedSchema = pm.item.responses.members[0].body;",
                      "        if (expectedSchema) {",
                      "            try {",
                      "                // Assuming the schema is a JSON string, it needs to be parsed",
                      "                let schema = JSON.parse(expectedSchema);",
                      "                pm.response.to.have.jsonSchema(schema);",
                      "            } catch (e) {",
                      "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                      "                // Fail the test if schema cannot be parsed or is invalid",
                      "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                      "            }",
                      "        } else {",
                      "            // If no schema is defined for the response, log it.",
                      "            // Depending on requirements, this could be a failing test.",
                      "            console.log(\"No schema found for this response in the collection definition.\");",
                      "        }",
                      "    } else {",
                      "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                      "        // Optionally, fail the test if a schema is always expected.",
                      "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "/",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7",
            "name": "Sample API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f59b9c39-6f23-4201-822b-5273d84473d6",
          "httpRequestId": "d0db8e02-b9fe-4c7b-9a91-d4b7447f10e8",
          "scriptId": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
          "execution": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
        }
      },
      {
        "error": {
          "name": "TypeError",
          "index": 1,
          "test": "Schema is valid",
          "message": "Cannot read properties of undefined (reading 'responses')",
          "stack": "TypeError: Cannot read properties of undefined (reading 'responses')\n   at Object.eval sandbox-script.js:2:1)",
          "checksum": "7bf58392ea3ee5d1d3b477d71662ee06",
          "id": "6124369b-0dac-4759-99c1-99a0a579186d",
          "timestamp": 1748730425225,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 1,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
          "name": "List all users",
          "request": {
            "name": "List all users",
            "description": {
              "type": "text/plain"
            },
            "url": {
              "path": [
                "users"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "method": "GET"
          },
          "response": [
            {
              "_": {
                "postman_previewlanguage": "json"
              },
              "id": "763ce194-752f-4848-934b-6ad3ea918e23",
              "name": "A list of users",
              "originalRequest": {
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET",
                "body": {}
              },
              "status": "OK",
              "code": 200,
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
              "cookie": []
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 2xx\", function () {",
                  "    pm.response.to.be.success;",
                  "});",
                  "",
                  "pm.test(\"Schema is valid\", function() {",
                  "    // Attempt to get the schema from the response definition in the collection",
                  "    // openapi-to-postmanv2 might store the expected response schema here",
                  "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                  "        let expectedSchema = pm.item.responses.members[0].body;",
                  "        if (expectedSchema) {",
                  "            try {",
                  "                // Assuming the schema is a JSON string, it needs to be parsed",
                  "                let schema = JSON.parse(expectedSchema);",
                  "                pm.response.to.have.jsonSchema(schema);",
                  "            } catch (e) {",
                  "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                  "                // Fail the test if schema cannot be parsed or is invalid",
                  "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                  "            }",
                  "        } else {",
                  "            // If no schema is defined for the response, log it.",
                  "            // Depending on requirements, this could be a failing test.",
                  "            console.log(\"No schema found for this response in the collection definition.\");",
                  "        }",
                  "    } else {",
                  "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                  "        // Optionally, fail the test if a schema is always expected.",
                  "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
              }
            }
          ],
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          }
        },
        "parent": {
          "_": {
            "postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7"
          },
          "item": [
            {
              "id": "beefc5c0-87e2-4c4f-9bf9-9147fe6db144",
              "name": "List all users",
              "request": {
                "name": "List all users",
                "description": {
                  "type": "text/plain"
                },
                "url": {
                  "path": [
                    "users"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Accept",
                    "value": "application/json"
                  }
                ],
                "method": "GET"
              },
              "response": [
                {
                  "_": {
                    "postman_previewlanguage": "json"
                  },
                  "id": "763ce194-752f-4848-934b-6ad3ea918e23",
                  "name": "A list of users",
                  "originalRequest": {
                    "url": {
                      "path": [
                        "users"
                      ],
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "query": [],
                      "variable": []
                    },
                    "header": [
                      {
                        "key": "Accept",
                        "value": "application/json"
                      }
                    ],
                    "method": "GET",
                    "body": {}
                  },
                  "status": "OK",
                  "code": 200,
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "body": "[\n  {\n    \"id\": -93424760,\n    \"name\": \"sunt dolor\"\n  },\n  {\n    \"id\": -82645866,\n    \"name\": \"proident Ut culpa esse\"\n  }\n]",
                  "cookie": []
                }
              ],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 2xx\", function () {",
                      "    pm.response.to.be.success;",
                      "});",
                      "",
                      "pm.test(\"Schema is valid\", function() {",
                      "    // Attempt to get the schema from the response definition in the collection",
                      "    // openapi-to-postmanv2 might store the expected response schema here",
                      "    if (pm.item.responses && pm.item.responses.members && pm.item.responses.members[0] && pm.item.responses.members[0].body) {",
                      "        let expectedSchema = pm.item.responses.members[0].body;",
                      "        if (expectedSchema) {",
                      "            try {",
                      "                // Assuming the schema is a JSON string, it needs to be parsed",
                      "                let schema = JSON.parse(expectedSchema);",
                      "                pm.response.to.have.jsonSchema(schema);",
                      "            } catch (e) {",
                      "                console.error(\"Failed to parse schema or schema not found for this request. Schema string: \" + expectedSchema, e);",
                      "                // Fail the test if schema cannot be parsed or is invalid",
                      "                pm.expect(false, \"Schema parsing/validation failed: \" + e.message).to.be.true;",
                      "            }",
                      "        } else {",
                      "            // If no schema is defined for the response, log it.",
                      "            // Depending on requirements, this could be a failing test.",
                      "            console.log(\"No schema found for this response in the collection definition.\");",
                      "        }",
                      "    } else {",
                      "        console.log(\"No response schema definition found in pm.item.responses for this request.\");",
                      "        // Optionally, fail the test if a schema is always expected.",
                      "        // pm.expect(false, \"Response schema definition missing in collection\").to.be.true;",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
                  }
                }
              ],
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              }
            }
          ],
          "event": [],
          "variable": [
            {
              "type": "string",
              "value": "/",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "281980ef-1364-41bd-adf9-6651d8f28dd7",
            "name": "Sample API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
            "description": {
              "content": "",
              "type": "text/plain"
            }
          }
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 1,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f59b9c39-6f23-4201-822b-5273d84473d6",
          "httpRequestId": "d0db8e02-b9fe-4c7b-9a91-d4b7447f10e8",
          "scriptId": "dc15afe9-5b32-4441-9f25-abbe01f8296e",
          "execution": "0e478ce2-b0ec-42c6-9dd6-ce8f2804b86b"
        }
      }
    ],
    "error": null
  }
}